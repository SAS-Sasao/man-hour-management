generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(cuid())
  name            String
  email           String      // unique制約を削除（会社内で一意にするため）
  password        String
  role            Role        @default(MEMBER)
  
  // 組織情報（NULL許可で安全にマイグレーション）
  companyId       String?     // 所属会社ID
  divisionId      String?     // 所属事業部ID
  departmentId    String?     // 所属部署ID
  groupId         String?     // 所属グループID
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // 組織リレーション
  company         Company?    @relation(fields: [companyId], references: [id])
  division        Division?   @relation(fields: [divisionId], references: [id])
  department      Department? @relation(fields: [departmentId], references: [id])
  group           Group?      @relation(fields: [groupId], references: [id])
  
  // 既存リレーション
  timeEntries     TimeEntry[]
  
  // 新しいプロジェクト関連リレーション
  projectManagers ProjectManager[] @relation("ProjectManagerUser")
  projectMembers  ProjectMember[]  @relation("ProjectMemberUser")
  
  // 🆕 WBS用リレーション
  assignedTasks   Task[]           @relation("TaskAssignee")
  assignedWBSEntries WBSEntry[]    @relation("WBSAssignee")

  // 会社内でメールアドレスが一意になるよう複合一意制約
  @@unique([companyId, email])
  @@map("users")
}

// 会社マスタ
model Company {
  id          String @id @default(cuid())
  code        String @unique  // 会社コード（例: "00001"）
  name        String          // 会社名
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  divisions   Division[]      // 事業部
  users       User[]          // 所属ユーザー

  @@map("companies")
}

// 事業部マスタ
model Division {
  id          String @id @default(cuid())
  companyId   String
  code        String          // 事業部コード（例: "SI", "CLOUD"）
  name        String          // 事業部名
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  departments Department[]    // 部署
  users       User[]          // 所属ユーザー
  
  @@unique([companyId, code]) // 会社内で事業部コードは一意
  @@map("divisions")
}

// 部署マスタ
model Department {
  id          String @id @default(cuid())
  divisionId  String
  code        String          // 部署コード（例: "DIST", "FIN"）
  name        String          // 部署名
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  division    Division @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  groups      Group[]         // グループ
  users       User[]          // 所属ユーザー
  
  @@unique([divisionId, code]) // 事業部内で部署コードは一意
  @@map("departments")
}

// グループマスタ
model Group {
  id           String @id @default(cuid())
  departmentId String
  code         String          // Grコード（例: "EC"）
  name         String          // グループ名
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  users        User[]          // 所属ユーザー
  
  @@unique([departmentId, code]) // 部署内でGrコードは一意
  @@map("groups")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String
  startDate   DateTime
  endDate     DateTime?
  status      ProjectStatus
  managerId   String?  // 後方互換性のため残す
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  phases      Phase[]
  tasks       Task[]
  timeEntries TimeEntry[]
  managers    ProjectManager[]
  members     ProjectMember[]
  wbsEntries  WBSEntry[]

  @@map("projects")
}

model Phase {
  id          String      @id @default(cuid())
  projectId   String
  name        String
  description String?
  order       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  timeEntries TimeEntry[]
  wbsEntries  WBSEntry[]

  @@map("phases")
}

model Task {
  id             String      @id @default(cuid())
  phaseId        String
  projectId      String
  name           String
  description    String?
  estimatedHours Float       @default(0)
  order          Int
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // 🆕 WBS用新規フィールド（全てNULL許可で安全に追加）
  plannedStartDate  DateTime?     // 予定開始日
  plannedEndDate    DateTime?     // 予定終了日
  actualStartDate   DateTime?     // 実際の開始日
  actualEndDate     DateTime?     // 実際の終了日
  status           TaskStatus @default(NOT_STARTED)  // 作業状況
  assigneeId       String?        // 担当者ID
  
  // 既存リレーション（変更なし）
  phase          Phase       @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  project        Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeEntries    TimeEntry[]
  
  // 🆕 新規リレーション
  assignee       User?       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  wbsEntries     WBSEntry[]

  @@map("tasks")
}

model TimeEntry {
  id          String   @id @default(cuid())
  userId      String
  projectId   String
  phaseId     String
  taskId      String
  date        DateTime
  hours       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phase       Phase    @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

// プロジェクトマネージャー（多対多）
model ProjectManager {
  id        String  @id @default(cuid())
  projectId String
  userId    String
  role      String? // "PRIMARY", "SECONDARY" など
  createdAt DateTime @default(now())
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation("ProjectManagerUser", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@map("project_managers")
}

// プロジェクトメンバー（多対多）
model ProjectMember {
  id        String  @id @default(cuid())
  projectId String
  userId    String
  role      String? // "DEVELOPER", "TESTER", "ANALYST" など
  joinDate  DateTime @default(now())
  leaveDate DateTime?
  createdAt DateTime @default(now())
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation("ProjectMemberUser", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@map("project_members")
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

// WBSエントリ（独立した作業管理）
model WBSEntry {
  id                String      @id @default(cuid())
  name              String      // 作業名
  description       String?     // 作業説明
  
  // 関連付け（どちらかは必須、両方設定も可能）
  taskId            String?     // 既存タスクとの関連付け（任意）
  projectId         String?     // プロジェクトとの直接関連付け（任意）
  phaseId           String?     // フェーズとの関連付け（任意）
  
  // 担当者
  assigneeId        String?     // 担当者ID
  
  // 予定
  plannedStartDate  DateTime?   // 予定開始日
  plannedEndDate    DateTime?   // 予定終了日
  estimatedHours    Float       @default(0) // 予定工数
  
  // 実績
  actualStartDate   DateTime?   // 実際の開始日
  actualEndDate     DateTime?   // 実際の終了日
  actualHours       Float       @default(0) // 実績工数
  
  // ステータス
  status            TaskStatus  @default(NOT_STARTED)
  
  // メタデータ
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // リレーション
  task              Task?       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  project           Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phase             Phase?      @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  assignee          User?       @relation("WBSAssignee", fields: [assigneeId], references: [id])
  
  @@map("wbs_entries")
}

enum TaskStatus {
  NOT_STARTED      // 未対応
  IN_PROGRESS      // 対応中
  REVIEW_PENDING   // レビュー待ち
  REVIEWED         // レビュー済
  COMPLETED        // 完了
}
