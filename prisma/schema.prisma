generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @default(cuid())
  name            String
  email           String      @unique
  password        String
  role            Role        @default(MEMBER)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  managedProjects Project[]   @relation("ProjectManager")
  timeEntries     TimeEntry[]

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      ProjectStatus @default(ACTIVE)
  managerId   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  phases      Phase[]
  manager     User?         @relation("ProjectManager", fields: [managerId], references: [id])
  tasks       Task[]
  timeEntries TimeEntry[]

  @@map("projects")
}

model Phase {
  id          String      @id @default(cuid())
  projectId   String
  name        String
  description String?
  order       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]
  timeEntries TimeEntry[]

  @@map("phases")
}

model Task {
  id             String      @id @default(cuid())
  phaseId        String
  projectId      String
  name           String
  description    String?
  estimatedHours Float       @default(0)
  order          Int
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  phase          Phase       @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  project        Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  timeEntries    TimeEntry[]

  @@map("tasks")
}

model TimeEntry {
  id          String   @id @default(cuid())
  userId      String
  projectId   String
  phaseId     String
  taskId      String
  date        DateTime
  hours       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phase       Phase    @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}
