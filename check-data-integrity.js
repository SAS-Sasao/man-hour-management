const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkDataIntegrity() {
  console.log('=== „Éá„Éº„ÇøÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ ===');
  
  try {
    // „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÄÅ„Éï„Çß„Éº„Ç∫„ÄÅ„Çø„Çπ„ÇØ„ÅÆË©≥Á¥∞Á¢∫Ë™ç
    const projects = await prisma.project.findMany({
      include: {
        phases: {
          include: {
            tasks: true
          }
        }
      }
    });
    
    console.log('\nüìã „Éó„É≠„Ç∏„Çß„ÇØ„ÉàË©≥Á¥∞:');
    projects.forEach(project => {
      console.log(`\nüîπ „Éó„É≠„Ç∏„Çß„ÇØ„Éà: ${project.name} (ID: ${project.id})`);
      console.log(`   „Çπ„ÉÜ„Éº„Çø„Çπ: ${project.status}`);
      console.log(`   „Éï„Çß„Éº„Ç∫Êï∞: ${project.phases.length}`);
      
      if (project.phases.length === 0) {
        console.log('   ‚ö†Ô∏è  „Éï„Çß„Éº„Ç∫„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„ÇìÔºÅ');
      } else {
        project.phases.forEach(phase => {
          console.log(`   üìÅ „Éï„Çß„Éº„Ç∫: ${phase.name} (ID: ${phase.id})`);
          console.log(`      „Çø„Çπ„ÇØÊï∞: ${phase.tasks.length}`);
          
          if (phase.tasks.length === 0) {
            console.log('      ‚ö†Ô∏è  „Çø„Çπ„ÇØ„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„ÇìÔºÅ');
          } else {
            phase.tasks.forEach(task => {
              console.log(`      üìù „Çø„Çπ„ÇØ: ${task.name} (ID: ${task.id})`);
            });
          }
        });
      }
    });
    
    // Áµ±Ë®àÊÉÖÂ†±
    const stats = {
      projects: await prisma.project.count(),
      phases: await prisma.phase.count(),
      tasks: await prisma.task.count(),
      timeEntries: await prisma.timeEntry.count(),
      users: await prisma.user.count()
    };
    
    console.log('\nüìä Áµ±Ë®àÊÉÖÂ†±:');
    console.log(`   „Éó„É≠„Ç∏„Çß„ÇØ„Éà: ${stats.projects}‰ª∂`);
    console.log(`   „Éï„Çß„Éº„Ç∫: ${stats.phases}‰ª∂`);
    console.log(`   „Çø„Çπ„ÇØ: ${stats.tasks}‰ª∂`);
    console.log(`   ÊôÇÈñìÂÖ•Âäõ: ${stats.timeEntries}‰ª∂`);
    console.log(`   „É¶„Éº„Ç∂„Éº: ${stats.users}‰ª∂`);
    
    // ÂïèÈ°å„ÅÆÁâπÂÆö
    console.log('\nüîç ÂïèÈ°å„ÅÆÁâπÂÆö:');
    let hasIssues = false;
    
    if (stats.projects > 0 && stats.phases === 0) {
      console.log('   ‚ùå „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØÂ≠òÂú®„Åô„Çã„Åå„Éï„Çß„Éº„Ç∫„Åå0‰ª∂');
      hasIssues = true;
    }
    
    if (stats.phases > 0 && stats.tasks === 0) {
      console.log('   ‚ùå „Éï„Çß„Éº„Ç∫„ÅØÂ≠òÂú®„Åô„Çã„Åå„Çø„Çπ„ÇØ„Åå0‰ª∂');
      hasIssues = true;
    }
    
    if (stats.timeEntries > 0 && (stats.phases === 0 || stats.tasks === 0)) {
      console.log('   ‚ùå ÊôÇÈñìÂÖ•Âäõ„ÅØÂ≠òÂú®„Åô„Çã„Åå„Éï„Çß„Éº„Ç∫„Åæ„Åü„ÅØ„Çø„Çπ„ÇØ„Åå‰∏çË∂≥');
      hasIssues = true;
    }
    
    if (!hasIssues) {
      console.log('   ‚úÖ „Éá„Éº„ÇøÊßãÈÄ†„Å´ÂïèÈ°å„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü');
    }
    
    // Êó¢Â≠ò„ÅÆÊôÇÈñìÂÖ•Âäõ„ÅÆË©≥Á¥∞Á¢∫Ë™ç
    if (stats.timeEntries > 0) {
      console.log('\n‚è∞ Êó¢Â≠ò„ÅÆÊôÇÈñìÂÖ•ÂäõË©≥Á¥∞:');
      const timeEntries = await prisma.timeEntry.findMany({
        include: {
          user: { select: { name: true } },
          project: { select: { name: true } },
          phase: { select: { name: true } },
          task: { select: { name: true } }
        }
      });
      
      timeEntries.forEach(entry => {
        console.log(`   üìÖ ${entry.date.toISOString().split('T')[0]}: ${entry.hours}h`);
        console.log(`      „É¶„Éº„Ç∂„Éº: ${entry.user.name}`);
        console.log(`      „Éó„É≠„Ç∏„Çß„ÇØ„Éà: ${entry.project.name}`);
        console.log(`      „Éï„Çß„Éº„Ç∫: ${entry.phase.name}`);
        console.log(`      „Çø„Çπ„ÇØ: ${entry.task.name}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDataIntegrity();
